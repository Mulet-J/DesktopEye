# Pipeline de build et release pour DesktopEye
name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'DesktopEye.sln'

jobs:
  # Job de CI - Tests et validation
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

#    - name: Run tests
#      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

#    - name: Upload test results
#      uses: actions/upload-artifact@v4
#      if: always()
#      with:
#        name: test-results
#        path: '**/TestResults/**/*'

  # Job de build et release
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            project: DesktopEye.Desktop.Windows
            artifact-name: DesktopEye-Windows-x64
            executable-extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            project: DesktopEye.Desktop.Linux
            artifact-name: DesktopEye-Linux-x64
            executable-extension: ""
          - os: macos-latest
            runtime: osx-arm64
            project: DesktopEye.Desktop.MacOS
            artifact-name: DesktopEye-macOS-ARM64
            executable-extension: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Extract version from tag
      id: get_version
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Publish application
      run: |
        dotnet publish ${{ matrix.project }}/${{ matrix.project }}.csproj \
          --runtime ${{ matrix.runtime }} \
          --configuration Release \
          --self-contained true \
          --output ./publish/${{ matrix.runtime }} \
          --no-restore \
          -p:PublishSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=false \
          -p:AssemblyVersion=${{ steps.get_version.outputs.version }} \
          -p:FileVersion=${{ steps.get_version.outputs.version }} \
          -p:InformationalVersion=${{ steps.get_version.outputs.version }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path "./publish/${{ matrix.runtime }}/*" -DestinationPath "./${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.zip"

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./publish/${{ matrix.runtime }}
        tar -czf "../../${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.tar.gz" *

    - name: Calculate checksums (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $hash = Get-FileHash "./${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.zip" -Algorithm SHA256
        "$($hash.Hash)  ${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.zip" | Out-File -FilePath "./${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.zip.sha256" -Encoding ASCII

    - name: Calculate checksums (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        sha256sum "${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.tar.gz" > "${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.tar.gz.sha256"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}
        path: |
          ${{ matrix.artifact-name }}-v${{ steps.get_version.outputs.version }}.*

  # Job de création de release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded artifacts
      run: ls -la ./artifacts/

    - name: Flatten artifacts
      run: |
        mkdir -p ./release-assets
        find ./artifacts -name "*.zip" -o -name "*.tar.gz" -o -name "*.sha256" | while read file; do
          cp "$file" ./release-assets/
        done
        ls -la ./release-assets/

    - name: Generate changelog
      id: changelog
      run: |
        # Récupérer le tag précédent
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "## 🚀 What's New in v${{ steps.get_version.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Génération du changelog basé sur les commits
        git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> CHANGELOG.md
        
        echo "" >> CHANGELOG.md
        echo "## 📦 Downloads" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Choose the appropriate version for your operating system:" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Windows x64**: \`DesktopEye-Windows-x64-v${{ steps.get_version.outputs.version }}.zip\`" >> CHANGELOG.md
        echo "- **Linux x64**: \`DesktopEye-Linux-x64-v${{ steps.get_version.outputs.version }}.tar.gz\`" >> CHANGELOG.md
        echo "- **macOS ARM64**: \`DesktopEye-macOS-ARM64-v${{ steps.get_version.outputs.version }}.tar.gz\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## 🔐 Checksums" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "SHA256 checksums are provided for each download to verify integrity." >> CHANGELOG.md
        
        # Afficher le changelog pour debug
        cat CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: "DesktopEye v${{ steps.get_version.outputs.version }}"
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
        files: |
          ./release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}
        generate_release_notes: true

  # Job de nettoyage des artifacts
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
    - name: Delete temporary artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          DesktopEye-Windows-x64-*
          DesktopEye-Linux-x64-*
          DesktopEye-macOS-ARM64-*
        failOnError: false
